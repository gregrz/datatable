lambda <- rgamma(n = 1, shape = 2, scale = lambda1 / 2)
}
### caculate the days at which it will rain based
### on a poisson distribution of the intervals,
### theoretically it can rain every day during
### the wet season; the 1 is added because R starts
### counting indices at 1 (and the interval can theoretically
### equal 0)
#rain.day.index <- cumsum(rpois(seas.len, 1 / lambda)) + 1
rain.day.index <- cumsum(rexp1(seas.len,lambda))
rain.day.index <- rain.day.index[rain.day.index <= seas.len]
### the same for the dry season
#rain.day.index.dry <- cumsum(rpois(365 - seas.len, 1 / (lambda * lambda.rat))) + 1
rain.day.index.dry <- cumsum(rexp1((365 - seas.len),lambda * lambda.rat))
rain.day.index.dry <- rain.day.index.dry[rain.day.index.dry <= 365 - seas.len] + seas.len
### calculate the rainfall rates for the wet and dry season
rain.rate <- rexp(length(rain.day.index), 1 / alpha)
rain.rate.dry <- rexp(length(rain.day.index.dry), 1 / alpha)
#print(mean(rain.rate))
### create the rainfall vector
rainfall <- rep(0, times = 365)
rainfall[rain.day.index] <- rain.rate
rainfall[rain.day.index.dry] <- rain.rate.dry
return(rainfall)
}
rainfall_generator <- function(MAP,seas.len,lambda.rat,alpha,
interann.rain.var = F, sim.years){
### calculate the average rainfall ferquency
lambda <- MAP / (alpha * (seas.len + lambda.rat * (365 - seas.len)))
lambda1 <- lambda
#res.df<-as.data.frame(replicate(sim.years,annual.rainfall()))
#names(res.df) <- 1:sim.years
return(as.data.frame(replicate(sim.years,annual.rainfall())))
}
# df<-rainfall_generator(500,200,0.2,10,sim.years=200)
# mean(colSums(df))
repf<-function(){
return(mean(colSums(rainfall_generator(500,200,0.2,10,sim.years=200))))
}
system.time(x<-replicate(1000,repf()))
rm(list=ls())
rexp1<-function(n,lambda){
x01<-round(rexp(n,lambda),0)
len0<-length(x01[x01==0])
x01[x01==0]<-1
len1<-length(x01[x01==1])
ind<-round(runif(n=len0,min=1, max=(n-len1)))
x01[x01>1][ind]<-x01[x01>1][ind]-1
return(x01)
}
annual.rainfall <- function(seas.len,lambda.rat,alpha,
interann.rain.var = F){
### if the arrival interval of rainfall should vary, then lambda
### is drawn from a gamm distribution with shape parameter 2 and
### scale parameter lambda/2
if(interann.rain.var){
lambda <- rgamma(n = 1, shape = 2, scale = lambda1 / 2)
}
### caculate the days at which it will rain based
### on a poisson distribution of the intervals,
### theoretically it can rain every day during
### the wet season; the 1 is added because R starts
### counting indices at 1 (and the interval can theoretically
### equal 0)
#rain.day.index <- cumsum(rpois(seas.len, 1 / lambda)) + 1
rain.day.index <- cumsum(rexp1(seas.len,lambda))
rain.day.index <- rain.day.index[rain.day.index <= seas.len]
### the same for the dry season
#rain.day.index.dry <- cumsum(rpois(365 - seas.len, 1 / (lambda * lambda.rat))) + 1
rain.day.index.dry <- cumsum(rexp1((365 - seas.len),lambda * lambda.rat))
rain.day.index.dry <- rain.day.index.dry[rain.day.index.dry <= 365 - seas.len] + seas.len
### calculate the rainfall rates for the wet and dry season
rain.rate <- rexp(length(rain.day.index), 1 / alpha)
rain.rate.dry <- rexp(length(rain.day.index.dry), 1 / alpha)
#print(mean(rain.rate))
### create the rainfall vector
rainfall <- rep(0, times = 365)
rainfall[rain.day.index] <- rain.rate
rainfall[rain.day.index.dry] <- rain.rate.dry
return(rainfall)
}
rainfall_generator <- function(MAP,seas.len,lambda.rat,alpha,
interann.rain.var = F, sim.years){
### calculate the average rainfall ferquency
lambda <- MAP / (alpha * (seas.len + lambda.rat * (365 - seas.len)))
lambda1 <- lambda
#res.df<-as.data.frame(replicate(sim.years,annual.rainfall()))
#names(res.df) <- 1:sim.years
return(as.data.frame(replicate(sim.years,annual.rainfall(seas.len,lambda.rat,alpha,
interann.rain.var = F))))
}
# df<-rainfall_generator(500,200,0.2,10,sim.years=200)
# mean(colSums(df))
repf<-function(){
return(mean(colSums(rainfall_generator(500,200,0.2,10,sim.years=200))))
}
system.time(x<-replicate(1000,repf()))
rm(list=ls())
rexp1<-function(n,lambda){
x01<-round(rexp(n,lambda),0)
len0<-length(x01[x01==0])
x01[x01==0]<-1
len1<-length(x01[x01==1])
ind<-round(runif(n=len0,min=1, max=(n-len1)))
x01[x01>1][ind]<-x01[x01>1][ind]-1
return(x01)
}
annual.rainfall <- function(seas.len,lambda.rat,alpha,lambda,lambda1,
interann.rain.var = F){
### if the arrival interval of rainfall should vary, then lambda
### is drawn from a gamm distribution with shape parameter 2 and
### scale parameter lambda/2
if(interann.rain.var){
lambda <- rgamma(n = 1, shape = 2, scale = lambda1 / 2)
}
### caculate the days at which it will rain based
### on a poisson distribution of the intervals,
### theoretically it can rain every day during
### the wet season; the 1 is added because R starts
### counting indices at 1 (and the interval can theoretically
### equal 0)
#rain.day.index <- cumsum(rpois(seas.len, 1 / lambda)) + 1
rain.day.index <- cumsum(rexp1(seas.len,lambda))
rain.day.index <- rain.day.index[rain.day.index <= seas.len]
### the same for the dry season
#rain.day.index.dry <- cumsum(rpois(365 - seas.len, 1 / (lambda * lambda.rat))) + 1
rain.day.index.dry <- cumsum(rexp1((365 - seas.len),lambda * lambda.rat))
rain.day.index.dry <- rain.day.index.dry[rain.day.index.dry <= 365 - seas.len] + seas.len
### calculate the rainfall rates for the wet and dry season
rain.rate <- rexp(length(rain.day.index), 1 / alpha)
rain.rate.dry <- rexp(length(rain.day.index.dry), 1 / alpha)
#print(mean(rain.rate))
### create the rainfall vector
rainfall <- rep(0, times = 365)
rainfall[rain.day.index] <- rain.rate
rainfall[rain.day.index.dry] <- rain.rate.dry
return(rainfall)
}
rainfall_generator <- function(MAP,seas.len,lambda.rat,alpha,
interann.rain.var = F, sim.years){
### calculate the average rainfall ferquency
lambda <- MAP / (alpha * (seas.len + lambda.rat * (365 - seas.len)))
lambda1 <- lambda
#res.df<-as.data.frame(replicate(sim.years,annual.rainfall()))
#names(res.df) <- 1:sim.years
return(as.data.frame(replicate(sim.years,annual.rainfall(seas.len,lambda.rat,alpha,lambda,lambda1,
interann.rain.var = F))))
}
# df<-rainfall_generator(500,200,0.2,10,sim.years=200)
# mean(colSums(df))
repf<-function(){
return(mean(colSums(rainfall_generator(500,200,0.2,10,sim.years=200))))
}
system.time(x<-replicate(1000,repf()))
rm(list=ls())
rexp1<-function(n,lambda){
x01<-round(rexp(n,lambda),0)
len0<-length(x01[x01==0])
x01[x01==0]<-1
len1<-length(x01[x01==1])
ind<-round(runif(n=len0,min=1, max=(n-len1)))
x01[x01>1][ind]<-x01[x01>1][ind]-1
return(x01)
}
rainfall_generator <- function(MAP,seas.len,lambda.rat,alpha,
interann.rain.var = F, sim.years){
### calculate the average rainfall ferquency
lambda <- MAP / (alpha * (seas.len + lambda.rat * (365 - seas.len)))
lambda1 <- lambda
annual.rainfall <- function(){
### if the arrival interval of rainfall should vary, then lambda
### is drawn from a gamm distribution with shape parameter 2 and
### scale parameter lambda/2
if(interann.rain.var){
lambda <- rgamma(n = 1, shape = 2, scale = lambda1 / 2)
}
### caculate the days at which it will rain based
### on a poisson distribution of the intervals,
### theoretically it can rain every day during
### the wet season; the 1 is added because R starts
### counting indices at 1 (and the interval can theoretically
### equal 0)
#rain.day.index <- cumsum(rpois(seas.len, 1 / lambda)) + 1
rain.day.index <- cumsum(rexp1(seas.len,lambda))
rain.day.index <- rain.day.index[rain.day.index <= seas.len]
### the same for the dry season
#rain.day.index.dry <- cumsum(rpois(365 - seas.len, 1 / (lambda * lambda.rat))) + 1
rain.day.index.dry <- cumsum(rexp1((365 - seas.len),lambda * lambda.rat))
rain.day.index.dry <- rain.day.index.dry[rain.day.index.dry <= 365 - seas.len] + seas.len
### calculate the rainfall rates for the wet and dry season
rain.rate <- rexp(length(rain.day.index), 1 / alpha)
rain.rate.dry <- rexp(length(rain.day.index.dry), 1 / alpha)
#print(mean(rain.rate))
### create the rainfall vector
rainfall <- rep(0, times = 365)
rainfall[rain.day.index] <- rain.rate
rainfall[rain.day.index.dry] <- rain.rate.dry
return(rainfall)
}
#res.df<-as.data.frame(replicate(sim.years,annual.rainfall()))
#names(res.df) <- 1:sim.years
return(as.data.frame(replicate(sim.years,annual.rainfall())))
}
# df<-rainfall_generator(500,200,0.2,10,sim.years=200)
# mean(colSums(df))
repf<-function(){
return(mean(colSums(rainfall_generator(500,200,0.2,10,sim.years=200))))
}
system.time(x<-replicate(1000,repf()))
rm(list=ls())
rexp1<-function(n,lambda){
x01<-round(rexp(n,lambda),0)
len0<-length(x01[x01==0])
x01[x01==0]<-1
len1<-length(x01[x01==1])
ind<-round(runif(n=len0,min=1, max=(n-len1)))
x01[x01>1][ind]<-x01[x01>1][ind]-1
return(x01)
}
rainfall_generator <- function(MAP,seas.len,lambda.rat,alpha,
interann.rain.var = F, sim.years){
### calculate the average rainfall ferquency
lambda <- MAP / (alpha * (seas.len + lambda.rat * (365 - seas.len)))
lambda1 <- lambda
annual.rainfall <- function(){
### if the arrival interval of rainfall should vary, then lambda
### is drawn from a gamm distribution with shape parameter 2 and
### scale parameter lambda/2
if(interann.rain.var){
lambda <- rgamma(n = 1, shape = 2, scale = lambda1 / 2)
}
### caculate the days at which it will rain based
### on a poisson distribution of the intervals,
### theoretically it can rain every day during
### the wet season; the 1 is added because R starts
### counting indices at 1 (and the interval can theoretically
### equal 0)
#rain.day.index <- cumsum(rpois(seas.len, 1 / lambda)) + 1
rain.day.index <- cumsum(rexp1(seas.len,lambda))
rain.day.index <- rain.day.index[rain.day.index <= seas.len]
### the same for the dry season
#rain.day.index.dry <- cumsum(rpois(365 - seas.len, 1 / (lambda * lambda.rat))) + 1
rain.day.index.dry <- cumsum(rexp1((365 - seas.len),lambda * lambda.rat))
rain.day.index.dry <- rain.day.index.dry[rain.day.index.dry <= 365 - seas.len] + seas.len
### calculate the rainfall rates for the wet and dry season
rain.rate <- rexp(length(rain.day.index), 1 / alpha)
rain.rate.dry <- rexp(length(rain.day.index.dry), 1 / alpha)
#print(mean(rain.rate))
### create the rainfall vector
rainfall <- rep(0, times = 365)
rainfall[rain.day.index] <- rain.rate
rainfall[rain.day.index.dry] <- rain.rate.dry
return(rainfall)
}
#res.df<-as.data.frame(replicate(sim.years,annual.rainfall()))
#names(res.df) <- 1:sim.years
return(as.data.frame(replicate(sim.years,annual.rainfall())))
}
# df<-rainfall_generator(500,200,0.2,10,sim.years=200)
# mean(colSums(df))
repf<-function(){
return(mean(colSums(rainfall_generator(500,200,0.2,10,sim.years=200))))
}
system.time(x<-replicate(1000,repf()))
rm(list=ls())
rainfall_generator <- function(MAP,seas.len,lambda.rat,alpha,
interann.rain.var = F, sim.years){
rexp1<-function(n,lambda){
x01<-round(rexp(n,lambda),0)
len0<-length(x01[x01==0])
x01[x01==0]<-1
len1<-length(x01[x01==1])
ind<-round(runif(n=len0,min=1, max=(n-len1)))
x01[x01>1][ind]<-x01[x01>1][ind]-1
return(x01)
}
### calculate the average rainfall ferquency
lambda <- MAP / (alpha * (seas.len + lambda.rat * (365 - seas.len)))
lambda1 <- lambda
annual.rainfall <- function(){
### if the arrival interval of rainfall should vary, then lambda
### is drawn from a gamm distribution with shape parameter 2 and
### scale parameter lambda/2
if(interann.rain.var){
lambda <- rgamma(n = 1, shape = 2, scale = lambda1 / 2)
}
### caculate the days at which it will rain based
### on a poisson distribution of the intervals,
### theoretically it can rain every day during
### the wet season; the 1 is added because R starts
### counting indices at 1 (and the interval can theoretically
### equal 0)
#rain.day.index <- cumsum(rpois(seas.len, 1 / lambda)) + 1
rain.day.index <- cumsum(rexp1(seas.len,lambda))
rain.day.index <- rain.day.index[rain.day.index <= seas.len]
### the same for the dry season
#rain.day.index.dry <- cumsum(rpois(365 - seas.len, 1 / (lambda * lambda.rat))) + 1
rain.day.index.dry <- cumsum(rexp1((365 - seas.len),lambda * lambda.rat))
rain.day.index.dry <- rain.day.index.dry[rain.day.index.dry <= 365 - seas.len] + seas.len
### calculate the rainfall rates for the wet and dry season
rain.rate <- rexp(length(rain.day.index), 1 / alpha)
rain.rate.dry <- rexp(length(rain.day.index.dry), 1 / alpha)
#print(mean(rain.rate))
### create the rainfall vector
rainfall <- rep(0, times = 365)
rainfall[rain.day.index] <- rain.rate
rainfall[rain.day.index.dry] <- rain.rate.dry
return(rainfall)
}
#res.df<-as.data.frame(replicate(sim.years,annual.rainfall()))
#names(res.df) <- 1:sim.years
return(as.data.frame(replicate(sim.years,annual.rainfall())))
}
# df<-rainfall_generator(500,200,0.2,10,sim.years=200)
# mean(colSums(df))
repf<-function(){
return(mean(colSums(rainfall_generator(500,200,0.2,10,sim.years=200))))
}
system.time(x<-replicate(1000,repf()))
df<-rainfall_generator(500,200,0.2,10,sim.years=200)
df<-replicate(100,rainfall_generator(500,200,0.2,10,sim.years=200))
df<-replicate(1000,rainfall_generator(500,200,0.2,10,sim.years=200))
system.time(df<-replicate(1000,rainfall_generator(500,200,0.2,10,sim.years=200)))
?require
require(data.table)
dt<-data.table(MAP=rep(500,times=1000),seas_len=rep(200,times=1000),lambda_rat=rep(0.2,times=1000),
alpha=rep(10,times=1000),interann_rain_var=rep(F,times=1000),sim_years=rep(200,times=1000))
system.time(x<-dt[,rainfall_generator(MAP,seas_len,lambda_rat,alpha,interann_rain_var,sim_years)])
head(dt)
system.time(x<-dt[,rainfall_generator(MAP,seas_len,lambda_rat,alpha,interann_rain_var,sim_years)])
system.time(x<-dt[,.(rainfall_generator(MAP,seas_len,lambda_rat,alpha,interann_rain_var,sim_years))])
dt<-data.table(rn=1:1000,MAP=rep(500,times=1000),seas_len=rep(200,times=1000),lambda_rat=rep(0.2,times=1000),
alpha=rep(10,times=1000),interann_rain_var=rep(F,times=1000),sim_years=rep(200,times=1000))
system.time(x<-dt[,.(rainfall_generator(MAP,seas_len,lambda_rat,alpha,interann_rain_var,sim_years)),
by=rn])
system.time(x<-dt[,rainfall_generator(.SD),by=rn])
system.time(x<-dt[,rainfall_generator(MAP,seas_len,lambda_rat,alpha,interann_rain_var,sim_years),by=rn])
dt[, rainfall_generator(.SD), by = ..I]
params <- list(min=0, max=1)
do.call(runif, c(n=100, params))
param.list<-list(MAP=rep(500,times=1000),seas_len=rep(200,times=1000),lambda_rat=rep(0.2,times=1000),
alpha=rep(10,times=1000),interann_rain_var=rep(F,times=1000),sim_years=rep(200,times=1000))
system.time(x<-do.call(rainfall_generator,param.list))
param.list<-list(MAP=rep(500,times=1000),seas.len=rep(200,times=1000),lambda.rat=rep(0.2,times=1000),
alpha=rep(10,times=1000),interann.rain.var=rep(F,times=1000),sim.years=rep(200,times=1000))
system.time(x<-do.call(rainfall_generator,param.list))
?do.call
system.time(x<-do.call("rainfall_generator",param.list))
head(param.list)
x<-lapply(param.list,rainfall_generator)
x<-mapply(rainfall_generator,param.list)
param.list$alpha
system.time(x<-mapply(rainfall_generator,param.list$MAP,param.list$seas.len,param.list$lambda.rat,param.list$alpha,
param.list$interann.rain.var,param.list$sim.years))
system.time(x<-mcmapply(rainfall_generator,param.list$MAP,param.list$seas.len,param.list$lambda.rat,param.list$alpha,
param.list$interann.rain.var,param.list$sim.years),mc.cores=detectCores())
?mcmapply
system.time(x<-mcmapply(rainfall_generator,param.list$MAP,param.list$seas.len,param.list$lambda.rat,param.list$alpha,
param.list$interann.rain.var,param.list$sim.years),mc.cores=4)
system.time(x<-mcmapply(rainfall_generator,param.list$MAP,param.list$seas.len,param.list$lambda.rat,param.list$alpha,
param.list$interann.rain.var,param.list$sim.years,mc.cores=detectCores()))
rep(data.frame(x=c(1,2),y=c(1,2)),times=10)
str(rep(data.frame(x=c(1,2),y=c(1,2)),times=10))
?expand.grid
200000/365
dt<-data.table(rn=1:1000,MAP=rep(500,times=1000),seas_len=rep(200,times=1000),lambda_rat=rep(0.2,times=1000),
alpha=rep(10,times=1000),interann_rain_var=rep(F,times=1000),sim_years=rep(200,times=1000))
system.time(x<-dt[,rainfall_generator(MAP,seas_len,lambda_rat,alpha,interann_rain_var,sim_years),by=rn])
as.vector(replicate(10, mean(rnorm())))
as.vector(replicate(10, mean(rnorm(10))))
as.vector(replicate(10, rnorm(10)))
replicate(10, rnorm(10))
x<-replicate(10, rnorm(10))
as.vector(x)
x
rm(list=ls())
require(data.table)
rainfall_generator <- function(MAP,seas.len,lambda.rat,alpha,
interann.rain.var = F, sim.years){
rexp1<-function(n,lambda){
x01<-round(rexp(n,lambda),0)
len0<-length(x01[x01==0])
x01[x01==0]<-1
len1<-length(x01[x01==1])
ind<-round(runif(n=len0,min=1, max=(n-len1)))
x01[x01>1][ind]<-x01[x01>1][ind]-1
return(x01)
}
### calculate the average rainfall ferquency
lambda <- MAP / (alpha * (seas.len + lambda.rat * (365 - seas.len)))
lambda1 <- lambda
annual.rainfall <- function(){
### if the arrival interval of rainfall should vary, then lambda
### is drawn from a gamm distribution with shape parameter 2 and
### scale parameter lambda/2
if(interann.rain.var){
lambda <- rgamma(n = 1, shape = 2, scale = lambda1 / 2)
}
### caculate the days at which it will rain based
### on a poisson distribution of the intervals,
### theoretically it can rain every day during
### the wet season; the 1 is added because R starts
### counting indices at 1 (and the interval can theoretically
### equal 0)
#rain.day.index <- cumsum(rpois(seas.len, 1 / lambda)) + 1
rain.day.index <- cumsum(rexp1(seas.len,lambda))
rain.day.index <- rain.day.index[rain.day.index <= seas.len]
### the same for the dry season
#rain.day.index.dry <- cumsum(rpois(365 - seas.len, 1 / (lambda * lambda.rat))) + 1
rain.day.index.dry <- cumsum(rexp1((365 - seas.len),lambda * lambda.rat))
rain.day.index.dry <- rain.day.index.dry[rain.day.index.dry <= 365 - seas.len] + seas.len
### calculate the rainfall rates for the wet and dry season
rain.rate <- rexp(length(rain.day.index), 1 / alpha)
rain.rate.dry <- rexp(length(rain.day.index.dry), 1 / alpha)
#print(mean(rain.rate))
### create the rainfall vector
rainfall <- rep(0, times = 365)
rainfall[rain.day.index] <- rain.rate
rainfall[rain.day.index.dry] <- rain.rate.dry
return(rainfall)
}
#res.df<-as.data.frame(replicate(sim.years,annual.rainfall()))
#names(res.df) <- 1:sim.years
return(as.vector(replicate(sim.years,annual.rainfall())))
}
dt<-data.table(rn=1:1000,MAP=rep(500,times=1000),seas_len=rep(200,times=1000),lambda_rat=rep(0.2,times=1000),
alpha=rep(10,times=1000),interann_rain_var=rep(F,times=1000),sim_years=rep(200,times=1000))
?Rprof
#### plot different effects on leaf water potential
setwd("~/Dropbox/PhD/MANUS/MANUS_EX_MECHANISC_OPT/PLOTS")
psiCrit<-seq(-6,-1,length.out = 10)
psiCrit<--4
wbex<-1:6
p50<-round(seq(0.3,0.8,length.out = 5),2)
psiL<-seq(min(psiCrit),-0.00001,length.out = 1000)
psiS<-seq(min(psiCrit),-0.00001,length.out = 1000)
dfm<-data.frame(expand.grid("psic"=psiCrit,"psil"=psiL,"psis"=psiS,"ex"=wbex,"p50"=p50))
dfm<-subset(dfm,psis>psic&psil>psic&psil<psis)
dfm$p37<-dfm$p50 * exp(0.37 / dfm$ex)
dfm$p37<-3/8*exp((log(5)-log(2)-log(1/dfm$ex))/dfm$ex)
dfm$k<-exp(-1*((dfm$psil)/(dfm$p37*dfm$psic))^dfm$ex)*abs(dfm$psil-dfm$psis)
dfk<-data.table(dfm)[,by=.(ex,p50,psis,psic),
.(mt=psil[which.max(k)],mk=k[which.max(k)])]
##### now also accounting for soil
rootD<-0.0005
rootLenDens<-5000
airEntry<--0.7 * 10^-3
bSoil<-4.9
ksat<-38.5 * 10^6
aa<-((rootD * (1 - (2 + 3 / bSoil)) *
log(pi * (rootD^2) * rootLenDens)) / 2)
dfm$ksoil<-(ksat * ((airEntry / dfm$psis)^(2 + (3 / bSoil)))) / aa
dfm$k<-exp(-1*((dfm$psil)/(dfm$p37*dfm$psic))^dfm$ex)*18000
dfm$kt<-((dfm$k*dfm$ksoil)/(dfm$k+dfm$ksoil))*
abs(dfm$psil-dfm$psis)*(dfm$psic-dfm$psil)/dfm$psic#-#exp(-1*((dfm$psil)/(0.5*dfm$p37*dfm$psic))^1.5)-
dfk<-data.table(dfm)[,by=.(ex,p50,psis,psic),
.(mt=psil[which.max(kt)],mk=kt[which.max(kt)])]
library(ggplot2)
library(data.table)
dfk<-data.table(dfm)[,by=.(ex,p50,psis,psic),
.(mt=psil[which.max(k)],mk=k[which.max(k)])]
dfk<-data.table(dfm)[,by=.(ex,p50,psis,psic),
.(mt=psil[which.max(kt)],mk=kt[which.max(kt)])]
ggplot(dfk,aes(psis,mt))+geom_line(aes(color=factor(ex)),size=0.9)+
#facet_wrap(facets=~ex)+
geom_line(aes(x=psis,y=-1*sqrt(psis*psic)),size=0.9,linetype=3)+
geom_abline(intercept = 0,slope=1)+
guides(color=guide_legend(title="b",keyheight=0.8))+
theme_bw()+
labs(x=expression(paste(psi[S]," (MPa)")),y=expression(paste(psi[L]," (MPa)")))+
theme(
panel.grid.minor=element_blank(),
text=element_text(size=12),
strip.background = element_blank(),
legend.position = c(0.07,0.83),
legend.background = element_rect(fill=alpha( 0.01)),
legend.key = element_blank(),
panel.background = element_blank()
)
#dir.create("/Users/greg/Downloads/site")
setwd("~/Dropbox/WEBSITE")
library(blogdown)
blogdown::hugo_build()
blogdown::serve_site()
install_hugo()
blogdown::hugo_build()
blogdown::serve_site()
rexp(10,0.2)
rexp(10,0.2)
?rexp
blogdown::stop_server()
?data.table
setwd("/Users/Gregor/Dropbox/PhD/PRESENTATIONS/LAB_DATATABLE")
install.packages("nycflights13")
library(nycflights13)
str(flights)
str(planes)
str(weather)
df<-flights
dft<-as.data.table(flights)
str(flights)
dfp<-ddply(df,.(month,carrier,origin),summarise,delay=mean(arr_delay))
library(nycflights13)
library(plyr)
library(data.table)
dfp<-ddply(df,.(month,carrier,origin),summarise,delay=mean(arr_delay))
system.time(dfp<-ddply(df,.(month,carrier,origin),summarise,delay=mean(arr_delay)))
df<-rbind(flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights)
system.time(dfp<-ddply(df,.(month,carrier,origin),summarise,delay=mean(arr_delay)))
system.time(dftt<-dft[,by=.(month,carrier,origin),.(mt=mean(arr_delay,na.rm=T))])
dft<-as.data.table(rbind(flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights,flights))
system.time(dftt<-dft[,by=.(month,carrier,origin),.(mt=mean(arr_delay,na.rm=T))])
